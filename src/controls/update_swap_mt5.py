import MetaTrader5 as mt5
from src.models.model import SessionLocal
from src.models.modelAccMt5 import AccountMt5
from src.models.modelSwapMt5 import SwapMt5
from datetime import datetime, timedelta
import schedule
import asyncio
import MetaTrader5 as mt5
import time
from src.utils.options import SEND_TIME_UPDATE_SWAP_SUMMER, SEND_TIME_UPDATE_SWAP_WINTER

def log_daily_swap(db, account_info, total_swap):
    new_entry = SwapMt5(
        username=str(account_info.login),
        server=account_info.server,
        swap=total_swap,
        created_at=datetime.utcnow() + timedelta(hours=7)  # VN time
    )
    db.add(new_entry)
    db.commit()
    print(f"‚úÖ ƒê√£ l∆∞u swap l√∫c {new_entry.created_at}, gi√° tr·ªã: {total_swap}", 'info')

def update_swap_mt5(positions, account_info):
    db = SessionLocal()
    try:
        total_swap = 0

        for pos in positions:
            total_swap += pos.swap

        return log_daily_swap(db, account_info, total_swap)
    except Exception as e:
        print(f"‚ùå L·ªói khi l∆∞u ph√≠ qua ƒë√™m: {e}")

def get_swap_time_str_vietnam():
    """Tr·∫£ v·ªÅ gi·ªù ch·∫°y swap theo m√πa (m√πa h√®: 4h, m√πa ƒë√¥ng: 5h) - t√≠nh theo gi·ªù Vi·ªát Nam"""
    now = datetime.now()
    month = now.month
    # M√πa h√®: t·ª´ th√°ng 4 ƒë·∫øn h·∫øt th√°ng 10
    if 4 <= month <= 10:
        return SEND_TIME_UPDATE_SWAP_SUMMER
    else:
        return SEND_TIME_UPDATE_SWAP_WINTER

def daily_swap_process(terminals):

    def job():
        for name, path in terminals.items():
            if not mt5.initialize(path):
                print(f"‚ö†Ô∏è Kh√¥ng kh·ªüi t·∫°o ƒë∆∞·ª£c MT5: {path}")
                continue
            account_info = mt5.account_info()
            positions = mt5.positions_get()
            if account_info and positions:
                update_swap_mt5(positions, account_info)
            mt5.shutdown()

    SEND_TIME_UPDATE_SWAP = get_swap_time_str_vietnam()
    schedule.every().day.at(SEND_TIME_UPDATE_SWAP).do(job)

    print(f"üïí daily_swap_process: S·∫Ω ch·∫°y l√∫c {SEND_TIME_UPDATE_SWAP} s√°ng m·ªói ng√†y...")

    while True:
        schedule.run_pending()
        time.sleep(60)